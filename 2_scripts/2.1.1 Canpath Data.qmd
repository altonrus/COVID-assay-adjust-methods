---
title: "2.1.1 Canpath Data Cleaning"
format: html
editor: visual
---

## Quarto

The aim of this qmd file is cleaning the Canpath data. 

In Canpath data we've removed three individuals who provided multiple samples, and several samples tested for multiple times. Those samples tested for multiple times did not result in inconsistent interpretations on assay results. See codes below for more details on data cleaning. 

In cleaned ver of Canpath data all rid (researcherID, participant ID) and sid (sample ID) are unique and 1-to-1, though some sid is missing.

## Running Code

## Load packages

```{r}
library(dplyr)         # Data management
# library(zoo)           # year-month format
```

## Load the dataset

```{r}
# The Questionnaire data
Canpath_qx <- read.csv("../1_data/private/CANPATH/DAO-543759_ResearcherDataset_Qx_96014par_1125var.csv")

# The linked administrative data
Canpath_admin <- read.csv("../1_data/private/CANPATH/DAO-543759_ResearcherDataset_Serology_Admin_25727par.csv")

# The serology data
Canpath_ser <- read.csv("../1_data/private/CANPATH/DAO-543759_ResearcherDataset_Serology_Results_74503par.csv")

# The new MTP Qx subset
Canpath_qx_MTP<-read.csv("../1_data/private/CANPATH/DAO-543759_ResearcherDataset_Qx_1114par_1127varMTP.csv")
```

##=============== Part.I Clean, merge and create a small subset===============##

#### 1.1 We need those variables from each dataset:

-   The questionnaire (qx) data:

```{r}
# age, pid, gender, location (FSA)

# age var:
summary(Canpath_qx$C_SDC_AGE) # N=3559 missing, our population is old median=64
hist(Canpath_qx$C_SDC_AGE)    # skewed normal dist, lack of young adults (18-35)

# sex/gender: use sex here
summary(Canpath_qx$C_SDC_SEX) # N=3559 missing
table(Canpath_qx$C_SDC_SEX, useNA = 'ifany')
# 0=male, 1=female. Much more f than m.

# location - 3-digit FSA
summary(Canpath_qx$C_ADM_FSA) # N=4569 missing, ~5%
table(is.na(Canpath_qx$C_ADM_FSA), useNA = 'ifany')

# province - not available, we can create one with FSA
```

-   The admin data: info about sampling

```{r}
# sample ID, 
summary(Canpath_admin$C1_SAMPLE_ID)

# cohort
summary(Canpath_admin$C1_ADM_COHORT_ID)

# date of collection
summary(Canpath_admin$C1_ADM_COLLECT_DATE)

# sample type
summary(Canpath_admin$C1_SAMPLE_TYPE)

# date of procession
summary(Canpath_admin$C1_SAMPLE_PROCESS_DATE)
```

-   The serology data: sero assay results
```{r}
# assay ID (three Sinai Hosp in-lab, 2 Abbott)
table(Canpath_ser$C1_CITF_ASSAY_ID, useNA = 'ifany')
# 10010-00: Gingras anti-N
# 10020-00: Gingras anti-S
# 10030-00: Gingras anti-S-RBD
# 20010-03: Abbott anti-N
# 20012-03: Abbott anti-S-RBD

# assay COI
table(Canpath_ser$C1_SAMPLE_ANTIGEN_CUTOFF, useNA = 'ifany')
table(Canpath_ser$C1_SAMPLE_ANTIGEN_CUTOFF, Canpath_ser$C1_CITF_ASSAY_ID)
# one single COI was applied to each assay, excellent!

# what is max value (upper dynamic range) for each assay?
table(Canpath_ser$C1_SAMPLE_ANTIGEN_MAXIMUM, useNA = 'ifany')
# not quite useful

# what is the assay results?
summary(Canpath_ser$C1_SAMPLE_RESULT, useNA = 'ifany')
hist(Canpath_ser$C1_SAMPLE_RESULT[Canpath_ser$C1_SAMPLE_RESULT<5])

# Interpretation of the results 1/0
table(Canpath_ser$C1_SAMPLE_RESULTS_DESCRIPTION, useNA = 'ifany')
```

-   All for three: pid (participants ID) and sid (sample ID)
```{r}
# sample_ID: only available in admin and ser data

# Sample ID
# admin data
summary(Canpath_admin$C1_SAMPLE_ID)
table(is.na(Canpath_admin$C1_SAMPLE_ID), useNA = 'ifany') # N=8349 missing, be careful
length(unique(Canpath_admin$C1_SAMPLE_ID))                # all non-missing has unique sample ID

# ser data
summary(Canpath_ser$C1_ADM_SPECIMEN_ID)
table(is.na(Canpath_ser$C1_ADM_SPECIMEN_ID), useNA = 'ifany')  # N=13632 missing, be careful
length(unique(Canpath_ser$C1_ADM_SPECIMEN_ID))                 # not all non-missing has unique sample ID

# Research ID: invididual ID
# qx data:
summary(Canpath_qx$ResearcherID)                        # N=96014, no missing
table(is.na(Canpath_qx$ResearcherID), useNA = 'ifany')
length(unique(Canpath_qx$ResearcherID))                 # all 96014 rid are unique

# admin data:
summary(Canpath_admin$ResearcherID)                     # N=25727, no missing
table(is.na(Canpath_admin$ResearcherID), useNA = 'ifany')
length(unique(Canpath_admin$ResearcherID))              # N=25724, duplicates

  ## find duplicates
  n_admin <- data.frame(table(Canpath_admin$ResearcherID))
  n_admin[n_admin$Freq > 1,]          # 3 duplicates, one pp with two samples (diff sample ID), collected on diff day. Drop the first one

# ser data
summary(Canpath_ser$ResearcherID)                      # N=74503, no missing
table(is.na(Canpath_ser$ResearcherID), useNA = 'ifany')
length(unique(Canpath_ser$ResearcherID))               # N=25975, duplicates due to same sample tested for multiple assays
```

#### 1.2 Merge three data
```{r}
# select the variables we need from each subset:
# qx subset:
qx_s<-select(Canpath_qx, ResearcherID, C_ADM_STUDY_DATASET, C_SDC_AGE, C_SDC_SEX,
             C_ADM_FSA)

# don't forget MTP subset
qx_s_mtp<-select(Canpath_qx_MTP, ResearcherID, C_ADM_STUDY_ID, 
             C_SDC_AGE, C_SDC_SEX, C_ADM_FSA,
             C1_SDC_AGE, C1_SDC_SEX, C1_ADM_FSA)
# apply shorter var names:
colnames(qx_s)<-c("rid", "study_id", "age", "sex", "fsa")
colnames(qx_s_mtp)<-c("rid", "study_id", "age", "sex", "fsa", 
                      "age1", "sex1", "fsa1")

# identify those missed from original data:
qx_s_mtp[qx_s_mtp$rid %in% qx_s$rid,] # not missed, N=699
qx_mtpmiss<-qx_s_mtp[!(qx_s_mtp$rid %in% qx_s$rid),] # missed, N=445


# rbind those two into one:
qx_s<-rbind.data.frame(qx_s, 
                       select(qx_mtpmiss, -c("age1", "sex1", "fsa1")))

# clean study_id
qx_s$study_id[qx_s$study_id=='5']<-"MTP"
table(qx_s$study_id, useNA = 'ifany')


# admin subset
admin_s<-select(Canpath_admin, ResearcherID, C1_SAMPLE_ID,
                C1_ADM_COHORT_ID, C1_ADM_COLLECT_DATE, C1_SAMPLE_TYPE, 
                C1_SAMPLE_PROCESS_DATE)
colnames(admin_s)<-c("rid", "sid_admin", "cohort_id", "date_col", "stype", "date_pro")

# ser data, use anti-N only
ser_s<-select(Canpath_ser[Canpath_ser$C1_CITF_ASSAY_ID %in% c("10010-00", "20010-03"),],
              ResearcherID, C1_ADM_SPECIMEN_ID, C1_CITF_ASSAY_ID, C1_SAMPLE_DATE_ASSAY_RUN,
              C1_SAMPLE_RESULT, C1_SAMPLE_RESULTS_DESCRIPTION)
colnames(ser_s)<-c("rid", "sid_ser", "assay_id", "date_asy", "result", "pos")

table(ser_s$rid %in% qx_mtpmiss$rid, useNA = 'ifany')
table(admin_s$rid %in% qx_mtpmiss$rid, useNA = 'ifany')
```
#### Data quality check of those small dataset
```{r}
# admin_s: missing
table(is.na(admin_s$rid), useNA = 'ifany')     # rid no missing, not all unique (3 duplicates)
# remove duplicates: drop the earliest sample
admin_s<-admin_s[!admin_s$sid %in% c("DB0006218", "DB0009025", "DB0009310"),]

table(is.na(admin_s$sid), useNA = 'ifany')     # sid 8349 missing
length(unique(admin_s$sid[!is.na(admin_s$sid)])) # non-missing sids all unique
# remove duplicates: drop the earliest sample
ser_s<-ser_s[!ser_s$sid %in% c("DB0009310"),]

# ser_s (only 2 anti-N assays): missing
table(is.na(ser_s$rid), useNA = 'ifany')      # rid no missing
length(unique(ser_s$rid))                     # duplicates exists

  n_ser <- data.frame(table(ser_s$rid))
  n_ser[n_ser$Freq > 1,]
# some sample has been tested multiple times by the same assay
# none of those testing has been result in inconsistency of anti-N positivity

# in ser_s, see where rid is duplicated: all used Mount Sinai Hosp Assay (anti-N)
ser_rid_dup<-ser_s[ser_s$rid %in% n_ser[n_ser$Freq > 1,]$Var1, ]
table(ser_s[ser_s$rid %in% n_ser[n_ser$Freq > 1,]$Var1, ]$assay_id, useNA='ifany')

# need to deduplicate ser_s, only keep one of duplicated records
ser_rid_dup$id<-c(1:402)
ser_rid_dup %>%
  distinct(rid, .keep_all=TRUE) # N=162 ï¼ˆ402-162 = 240 de-duplicated)

ser_s<-ser_s %>%
  distinct(rid, .keep_all=TRUE) # N=25839, number matches
```



```{r}
# merge those small subsets
m1<-merge(admin_s, ser_s,
          by = c("rid"), all.x = F, all.y = T)
m2<-merge(m1, qx_s, by='rid', all.x = T, all.y = F)

# sid match
m2$sid_match[!is.na(m2$sid_admin) & !is.na(m2$sid_ser) &
             m2$sid_admin == m2$sid_ser]<-"match"
m2$sid_match[!is.na(m2$sid_admin) & !is.na(m2$sid_ser) &
             m2$sid_admin != m2$sid_ser]<-"mismatch"
m2$sid_match[!is.na(m2$sid_admin) & is.na(m2$sid_ser)]<-"ser miss"
m2$sid_match[is.na(m2$sid_admin) & !is.na(m2$sid_ser)]<-"admin miss"
m2$sid_match[is.na(m2$sid_admin) & is.na(m2$sid_ser)]<-"all miss"
table(m2$sid_match, useNA = 'ifany') # no mismtach, good

# drop unnecessary sids
m2$sid<-m2$sid_ser
m2<-select(m2, -c("sid_admin", "sid_ser", "sid_match"))

# is cohort_id same as study_id?
table(m2$cohort_id, m2$study_id, useNA = 'ifany')
# looks messy, use FSA to determine prov of residency then

# unique participants (rid)
summary(m2$rid)
table(is.na(m2$rid), useNA = 'ifany')          # N=25839, no missing
length(unique(m2$rid))                         # all unique

# unique samples (sid)
summary(m2$sid)
table(is.na(m2$sid), useNA = 'ifany')          # N=21346, 4493 missing
length(unique(m2$sid[!is.na(m2$sid)]))         # N=21346, no missing all unique
```
#### Apply FSA-province conversion
```{r}
# this chunk is provided by Y.Yu
province_fun <- function(var) {
  fsa_f = as.character(substr(var,1,1))
  prov =  ifelse(fsa_f == "A", "NL",
                 ifelse(fsa_f == "B", "NS",
                        ifelse(fsa_f == "C", "PE",
                               ifelse(fsa_f == "E", "NB",
                                      ifelse(fsa_f == "G" | fsa_f == "H" | fsa_f == "J", "QC",
                                             ifelse(fsa_f == "K" | fsa_f == "L" | fsa_f == "M" | fsa_f == "N" | fsa_f == "P", "ON",
                                                    ifelse(fsa_f == "R", "MB",
                                                           ifelse(fsa_f == "S", "SK",
                                                                  ifelse(fsa_f == "T", "AB",
                                                                         ifelse(fsa_f == "V", "BC",
                                                                                ifelse(fsa_f == "X", "NU/NT",
                                                                                       ifelse(fsa_f == "Y", "YT", NA
                                                                                       ))))))))))))
  
  return(prov)}

# apply the function
m2$prov<-province_fun(m2$fsa)
table(m2$prov, m2$study_id, useNA = 'ifany')

# need to clean NA's
table(m2$cohort_id, m2$study_id, useNA = 'ifany')
table(m2$prov, m2$cohort_id, useNA = 'ifany')

## 1) group by prov (FSA converted)
  m2$region[m2$prov %in% c("NB", "NL", "NS", "PE")]<-"Atlantic"
  m2$region[m2$prov %in% c("AB")]<-"Alberta"
  m2$region[m2$prov %in% c("BC")]<-"BC"
  m2$region[m2$prov %in% c("ON")]<-"Ontario"
  m2$region[m2$prov %in% c("QC")]<- "QC"  # recode it as NA later
  m2$region[m2$prov %in% c("SK", "MB")]<- "SK & MB"
table(m2$prov, m2$region, useNA = 'ifany')

## 2) clean NA, use study_id
table(m2[is.na(m2$region),]$study_id, 
      m2[is.na(m2$region),]$cohort_id, useNA = 'ifany')
  m2$region[is.na(m2$region) &
            m2$cohort_id == 1] <- "Atlantic"
  m2$region[is.na(m2$region) &
            m2$cohort_id == 3] <- "BC"
  m2$region[is.na(m2$region) &
            m2$cohort_id == 5] <- "SK & MB"
  m2$region[is.na(m2$region) &
            m2$cohort_id == 6] <- "Ontario"
  m2$region[is.na(m2$region) & is.na(m2$cohort_id) &
            m2$study_id == "ATP"] <- "Alberta"
  m2$region[is.na(m2$region) & is.na(m2$cohort_id) &
            m2$study_id == "OHS"] <- "Ontario"
table(m2$region, useNA = 'ifany')

## recode QC as missing
  m2$region[m2$region=="QC"]<-NA # N=4 coded as missing (NA)
```

#### see what is the assay used in each region
```{r}
m2 %>%
  select(region, assay_id) %>%
  group_by(region, assay_id) %>%
  summarise(Freq=n())

# clean the date var (codes provided by M.Knight)

## The collection date var
m2$date_col1<-gsub("/","-", m2$date_col) # replace "/" with "-"
m2$date_col1<-as.Date(lubridate::parse_date_time(m2$date_col1,
                                                 c("%y-%m-%d","%m-%d-%y")),tz = "UTC")

## The assay running date var
m2$date_asy[m2$date_asy=="21-07-16"]<-"2021-07-16"
m2$date_asy1<-as.Date(m2$date_asy, format = "%Y-%m-%d")

## cleaning temp var
m2$date_asy<-m2$date_asy1
m2$date_col<-m2$date_col1
m2<-select(m2, -c("date_col1", "date_asy1"))

## Beware some discrepancies: sample collection time is later than assay date
## N=4
m2[m2$date_asy < m2$date_col &
             !is.na(m2$date_asy) & !is.na(m2$date_col),]

# when those assay was collected?
m2 %>%
  group_by(region) %>%
  summarise(Freq=n(),
            tcol_min = min(date_col, na.rm=T),
            tcol_max = max(date_col, na.rm=T))
```

#### 1.3 save the data
```{r}
Canpaths<-m2
rm(m1, m2, n_admin, ser_sw, n_ser, qx_mtpmiss, ser_rid_dup)
rm(admin_s, qx_s, qx_s_mtp, ser_s)
save(Canpaths, file = "../1_data/private/CANPATH/Canpaths.RData")

# Save to the shared folder 
save(Canpaths, file = "~/../../jmy/CANPATH/Canpaths.RData")
```











