---
title: "2.3 Prob Model for PCR Positivity Estimation"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

The aim of this qmd file is providing an alternative way to monitor the severity of the outbreak. Besides of cumulative incidence in a certain time interval (like 3 months) we build a probabilistic model to estimate the prob of having a positive PCR test results in last three months. Those two are similar and we can use prob(inf. in past 3-month) to estimate the 3-month rolling incidence.

By calculating monthly average of the prob(PCR+ in past 3 months) we got an estimation in each month. By linking all those dots together we got a curve, suggesting the changing of severity of the pandemic overtime.

## Running Code

## Load packages

```{r}
library(dplyr)         # Data management
library(ggplot2)       # ggplot2
library(ggpubr)        # ggplot2 QQ plot for normality check
library(zoo)           # year-month format
library(lmtest)        # for LR test, comparing models
#library(reshape2)     # for melt() function
library(readxl)        # for reading .xlsx data
library(nnet)          # for multinomial log regression
```

## Load dataset

```{r}
# The CBS full data
load(file = "../1_data/private/CBS.RData")
table(CBS$province, useNA = 'ifany')

# The CBSs data, for prob model only
load(file = "../1_data/private/CBSs.RData")

load(file = "../1_data/private/RFD4682e.RData")
```

## Dataset from previous studies for model building

```{r}
## Data-01:France Leon, for negative ref, use non-reactive samples before week 69 (Oct 2020)
library(readxl)
X1_pone <- read_excel("../1_data/private/Prob Model/1-pone.xlsx", 
    sheet = "ST1_Dataset", col_types = c("numeric", 
        "text", "numeric", "numeric", "numeric", 
        "numeric", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text"))
dta_01<-select(X1_pone, 1:7, 27)
dta_01s<-dta_01[dta_01$Result=="NonReac" &
                dta_01$`Donation type`!="Convalescent plasma" &
                dta_01$`Donation Week`<69,]

# keep only assay, age, sex
dta_01s<-select(dta_01s, 1,5,6,7)
colnames(dta_01s)<-c("roche_n", "pid", "age", "gender")
tb1<-as.data.frame(table(dta_01s$pid))
colnames(tb1)<-c("pid","freq")
tb1$sample_wt<-1/tb1$freq
dta_01s<-merge(dta_01s, select(tb1, 1,3), by="pid",all.x = T, all.y = F)

## add interp var and study ID
dta_01s$study<-rep(1, length(dta_01s$pid))
dta_01s$time_pso<-rep("never_inf", length(dta_01s$pid))
rm(tb1, tb2)
```

```{r}
## Data-03, pre-Covid negative ref only, from Jamaica (Carribean)
X3_mmc2 <- read_excel("../1_data/private/Prob Model/3-mmc2.xlsx", 
    range = "A2:M124", na = "NT")
dta_03<-select(X3_mmc2, 2,6)
dta_03$pid<-c(1:length(dta_03$`Elecsys Index Value`))
dta_03$study<-rep(3, length(dta_03$pid))
dta_03$time_pso<-rep("never_inf", length(dta_03$pid))

dta_03s<-dta_03[!(is.na(dta_03$`Elecsys Index Value`) &
                  is.na(dta_03$`Architect IgG Index Value`)),]

# add weights
dta_03s$sample_wt<-rep(1, length(dta_03s$pid))

# correct var names
colnames(dta_03s)<-c("roche_n", "abbott_n",
                     colnames(dta_03s[,3:6]))
```

```{r}
## Data-04, 2/8 months data PSO, extracted from Y. Nagakama et al.
X4_Nakagama_all <- read_excel("../1_data/private/Prob Model/4-Nakagama_all.xlsx")
dta_04<-X4_Nakagama_all 
dta_04$time_pso[dta_04$time_pso=="2 months"]<-"less_3_month"
dta_04$time_pso[dta_04$time_pso=="8 months"]<-"more_3_month"

# All participants been sampled twice, wt=0.5
dta_04$sample_wt<-rep(0.5, length(dta_04$pid))

# correct col names
colnames(dta_04)<-c("study", colnames(dta_04[,2:6]))
```

```{r}
## Data-06, shared by Dr Paul Bieniasz
X6_Paul <- read_excel("../1_data/private/Prob Model/6-2024_02_06_SR1407_McGill.xlsx", 
    sheet = "data_import", skip = 1)
dta_06<-select(X6_Paul, 1:6, 9)
colnames(dta_06)<-c("age", "gender", "pid", "time",
                    "abbott_n", "roche_n", "study")
dta_06s<-dta_06[!(is.na(dta_06$abbott_n) &
                  is.na(dta_06$roche_n)),]

# add time_pso based on time
dta_06s$time_pso[dta_06s$time<=90]<-"less_3_month"
dta_06s$time_pso[dta_06s$time> 90]<-"more_3_month"
table(dta_06s$time_pso, useNA = 'ifany')

# add weights
tb1<-as.data.frame(table(dta_06s$pid))
colnames(tb1)<-c("pid","freq")
tb1$sample_wt<-1/tb1$freq
dta_06s<-merge(dta_06s, select(tb1, 1,3), by="pid",all.x = T, all.y = F)
rm(tb1, tb2)

dta_06s<-select(dta_06s, -c("time"))
```

#### bind all those four data by rows

```{r}
dta_all<-dplyr::bind_rows(dta_01s, dta_03s, dta_04, dta_06s)

# add log quant assay
dta_all$log_roche_n<-log(dta_all$roche_n)    # COI for log_n = 0
dta_all$log_abbott_n<-log(dta_all$abbott_n)  # COI for log)n = 0.3365 (COI = 1.4)

# save the rbinded harmonized data
save(dta_all, file="../1_data/private/Prob Model/dta_all.RData")
```

##============================ Part I. Probablistic Model ====================##

## Create a small subset for PCR+ data

```{r}
APL_PCR<-RFD4682_e %>%
  .[is.na(.$`N-IgG_RESULT`)==F & .$NAAT_STATUS %in% c("Negative","Positive"),]
APL_PCR$NAAT[APL_PCR$NAAT_STATUS=="Positive"]<-1
APL_PCR$NAAT[APL_PCR$NAAT_STATUS=="Negative"]<-0
APL_PCR$NAAT<-as.numeric(APL_PCR$NAAT)
table(APL_PCR$NAAT_STATUS, APL_PCR$NAAT, useNA = 'ifany')

# A subset for those who got results within 90 days
APL_PCR90<-APL_PCR %>%
  .[.$DAYS_SINCE_NAAT>=0 & .$DAYS_SINCE_NAAT<=90,]
```

## Build regression model using the data

```{r}
# Model 1: add age and sex as covariates, 90 days only
plm01<-glm(NAAT ~ AGE_AT_COLLECTION + GENDER  + N, data = APL_PCR90,
           family = binomial(link = "logit"))
summary(plm01)

# Model 2: add age and sex as covariates, everyone
plm02<-glm(NAAT ~ AGE_AT_COLLECTION + GENDER  + N, data = APL_PCR,
           family = binomial(link = "logit"))
summary(plm02)

# Model 3, add NAAT time into the model and compare it with model 2
plm03<-glm(NAAT ~ AGE_AT_COLLECTION + GENDER  + N + DAYS_SINCE_NAAT, data = APL_PCR,
           family = binomial(link = "logit"))
summary(plm03)

lrtest(plm02, plm03) # Sig difference, much lower AIC
```

Based on model 2 we can also add time since last PCR test into analysis, and it will improve AIC greatly for model fitting. However, this model is not applicable for other datasets as the PCR test info is missing.

```{r}
# Add predicted prob back to the data
APL_PCR90$NAAT_p<-predict(plm01, type = 'response')
hist(APL_PCR90$NAAT)

sum(APL_PCR90$NAAT)    # N=1008
sum(APL_PCR90$NAAT_p)  # N=1008
```

## Multinomial Regression Model:

```{r}
mnlm01<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ roche_n, data = dta_all)
summary(mnlm01)

(summary(mnlm01))$coeffcients/summary(mnlm01)$standard.errors

# Model 02 takes sample weights into account
mnlm02<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ roche_n, 
                 data = dta_all, weights = sample_wt)
summary(mnlm02)
```

Notes on sample weights: About the target population estimates we have in the study, it is "the proportion of being infected in past 3 months" at a certain time point (each month). So, we can regard it as a point prevalence of the target population. In this case, samples sampled at different months should be unweighted as they contributed independently to each month's point prevalence estimates.

As for the models we have been working on recently, it's a little bit different. The data we used are longitudinal but we used it in a cross-sectional manner: we pooled the data from all time point together then used quant assay data predicting the probability of being infected in the past three months. In this case, we should apply weights. Otherwise, individuals who were sampled multiple times would disproportionately influence the model parameter estimates, so they need to be downweighted."

```{r}
# model 03: using log-transformed assay

# check the distribution of roche_n (<COI)
ggdensity(dta_all$roche_n[dta_all$roche_n<1])     # mostly normal, but skewed
ggqqplot(dta_all$roche_n[dta_all$roche_n<1])      # same above
shapiro.test(dta_all$roche_n[dta_all$roche_n<1])  # not normal

# check the distribution of log_e roche_n (<COI)
ggdensity(dta_all$log_roche_n[dta_all$log_roche_n<0])     # mostly normal, but skewed
ggqqplot(dta_all$log_roche_n[dta_all$log_roche_n<0])      # same above
shapiro.test(dta_all$log_roche_n[dta_all$log_roche_n<0])  # not normal

# what if log-10 transformed
shapiro.test(log10(dta_all$roche_n[dta_all$roche_n<1]))

# check the positive cases roche-n
ggdensity(dta_all$roche_n[dta_all$roche_n>1])     # mostly normal, but skewed
ggqqplot(dta_all$roche_n[dta_all$roche_n>1])      # same above
shapiro.test(dta_all$roche_n[dta_all$roche_n>1])  # not normal

# log-e transformed, >COI
ggdensity(dta_all$log_roche_n[dta_all$log_roche_n>0])     # mostly normal, but skewed
ggqqplot(dta_all$log_roche_n[dta_all$log_roche_n>0])      # same above
shapiro.test(dta_all$log_roche_n[dta_all$log_roche_n>0])  # not normal
```

```{r}
# Model 02 takes sample weights into account
mnlm03<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ log_roche_n, 
                 data = dta_all, weights = sample_wt)
summary(mnlm03)
```

##====================== Part II. Applying the model to APL data =============##

Apply the APL_90 model to everyone in the dataset, then plot the difference btw those who has PCR test results (observed) and those who do not (predicted).

Compared to model 1, model 2 is predicting "ever predicted" rather than "infected in past three months" as it does in model 1. The only one we can apply to the APL data is the model 1.

need to rewrite this section

#### 2.1 Prepare for the dataset

```{r}
#those tested within last 90 days
summary(APL_PCR90$DAYS_SINCE_NAAT) # Model 1 is built upon this dataset

# Add an indicator for those who had PCR test in past 90 days
RFD4682_e$PCR90<-rep(0, length(RFD4682_e$order_ID))
RFD4682_e$PCR90[RFD4682_e$order_ID %in% APL_PCR90$order_ID]<-1
table(RFD4682_e$PCR90)

# Clean the gender variable (level unknown)
table(RFD4682_e$GENDER)
APL_Clean<-RFD4682_e
APL_Clean$GENDER[APL_Clean$GENDER=="Unknown"]<-NA

# Recode NAAT as 0/1/9
APL_Clean$NAAT[APL_Clean$NAAT_STATUS=="Positive"]<-1
APL_Clean$NAAT[APL_Clean$NAAT_STATUS=="Negative"]<-0
APL_Clean$NAAT[APL_Clean$NAAT_STATUS=="No Prior NAT"]<-9
APL_Clean$NAAT<-as.numeric(APL_Clean$NAAT)
table(APL_Clean$NAAT_STATUS, APL_Clean$NAAT, useNA = 'ifany')

# Apply model 1 to APL data (full)
APL_Clean$NAAT_p<-predict(plm01, newdata = APL_Clean, type = 'response')

# Create NAAT_m, using real NAAT results for those tested <=90 days
APL_Clean$NAAT_m <- APL_Clean$NAAT_p
APL_Clean$NAAT_m[APL_Clean$PCR90==1 & APL_Clean$NAAT_STATUS=="Positive"]<-1
APL_Clean$NAAT_m[APL_Clean$PCR90==1 & APL_Clean$NAAT_STATUS=="Negative"]<-0
        
      
summary(APL_Clean$NAAT_m)
table(APL_Clean$NAAT_m==1) # number matches
table(APL_Clean$NAAT_m==0)
```

#### 2.2 Based on new data, making plot seperately

```{r}
# Calculate positivity for each month

# tb1-the data (PCR<90) used to build model
tb1<-APL_Clean[APL_Clean$PCR90==1,] %>%
  group_by(Col_Month) %>%
  summarise(n = n() , pos= mean(NAAT_m))
tb1$PCR90<-rep(1, length(tb1$Col_Month))

# tb2-we applied the model to the rest of APL (PCR>90) 
tb2<-APL_Clean[APL_Clean$PCR90==0,] %>%
  group_by(Col_Month) %>%
  summarise(n = n() , pos= mean(NAAT_m, na.rm=TRUE))
tb2$PCR90<-rep(0, length(tb2$Col_Month))

# Merge the data to take a look
tb3<-merge(tb1, tb2, by = "Col_Month", all.x = T, all.y = T)
tb3$Col_Month<-as.yearmon(tb3$Col_Month)
tb3<-tb3[order(tb3$Col_Month),]

# Compare the difference
# Paired t-test
t.test(tb3$pos.x[18:27], tb3$pos.y[18:27], paired=1)
# p-value=0.2761, no sig diff between observed (<90D) and the rest
```

#### The plots

```{r}
APL_Pmelt<-rbind.data.frame(select(tb1, Col_Month, pos, PCR90), 
                            select(tb2[18:27,], Col_Month, pos, PCR90))
APL_Pmelt$PCR90[APL_Pmelt$PCR90==0]<-"Predicted"
APL_Pmelt$PCR90[APL_Pmelt$PCR90==1]<-"Observed"

APL_Pmelt %>%
  ggplot(aes(x=Col_Month, y=pos, group=PCR90, colour=PCR90)) +
  geom_point() +
  geom_line()  +
  geom_hline(yintercept=0, colour='blue', linetype=2) +
  theme_bw() 
```

#### 2.3 Model adjusting for age and sex

The multinominal model we applied to APL before (mnlm01, 02, 03), none of those three model has adjusted for covariates. However with the data we have we could adjust for those two variables in Roches assays.

This subsection is to compare two models, one with age & sex adjusted and another one adjusted for nothing (mnlm03). To make two models comparable we will only use the subset with only age&sex data available

```{r}
mnlm03.a<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ log_roche_n, 
                 data = dta_all[!is.na(dta_all$age) & 
                                !is.na(dta_all$gender),], 
                 weights = sample_wt)
summary(mnlm03.a)

mnlm03.b<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ log_roche_n + 
                     age + gender, 
                 data = dta_all[!is.na(dta_all$age) & 
                                !is.na(dta_all$gender),], 
                 weights = sample_wt)
summary(mnlm03.b)

lrtest(mnlm03.a, mnlm03.b)
```

```{r}
# what about adding age & sex seperately?
mnlm03.b_age<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ log_roche_n + 
                     age, 
                 data = dta_all[!is.na(dta_all$age) & 
                                !is.na(dta_all$gender),], 
                 weights = sample_wt)
summary(mnlm03.b_age)
lrtest(mnlm03.b_age, mnlm03.b)

mnlm03.b_sex<-multinom(relevel(as.factor(time_pso), ref = "never_inf") ~ log_roche_n + 
                     gender, 
                 data = dta_all[!is.na(dta_all$age) & 
                                !is.na(dta_all$gender),], 
                 weights = sample_wt)
summary(mnlm03.b_sex)
lrtest(mnlm03.b_sex, mnlm03.b)
```

**Conclusion**: 1.Adjusting for age and gender does not improve the model fit significantly. 2.Adjusting for gender only will have limited improvement on model fit. Not adjusting for age & sex is okay, it will allow us to utilize more neg ref data, as age & sex info is usually missing in those data.

##============ Part III. Apply Model to CBS Data ================

```{r}
# Add log roche_n to the CBS data
CBS$log_roche_n<-log(CBS$roche_n)


CBS_prob_r<-as.data.frame(predict(mnlm03, newdata = CBS, "probs")) # num of >3 months = 0
mean(CBS_prob_r[,1], na.rm = T)  # 59.97%
mean(CBS_prob_r[,2], na.rm = T)  # 27.70%
mean(CBS_prob_r[,3], na.rm = T)  # 12.33%

CBSs<-cbind.data.frame(select(CBS, pid, sampledate, sex, age, fsa,
                        province, roche_n, abbott_n, roche_s, log_roche_n),
                 CBS_prob_r)
```

```{r}
## Applying the model with age & sex
CBS$gender<-CBS$sex
CBS_prob_r2<-as.data.frame(predict(mnlm03.b, newdata = CBS, "probs")) # num of >3 months = 0
mean(CBS_prob_r2[,1], na.rm = T)  # 59.49%
mean(CBS_prob_r2[,2], na.rm = T)  # 32.45%
mean(CBS_prob_r2[,3], na.rm = T)  # 8.06%

CBSs2<-cbind.data.frame(select(CBS, pid, sampledate, sex, age, fsa,
                        province, roche_n, abbott_n, roche_s, log_roche_n),
                 CBS_prob_r2)
```


#### Make by Region Plots

```{r}
# Recategorize by regions
table(CBSs$province)

# 12 provinces, recatgorized into six regions
# region divided according to Yuan's study. In CBS data since the number of samples from QC and North prov are too small (N=13, 85+83). We decided to exclude samples from those two prov from analysis.
# Also, since APL provides AB data only, we will divide prairie prov into AB and SKS+MN. This should apply to Canpath data as well.


CBSs$region<-rep(NA, length(CBSs$pid))
CBSs$region[CBSs$province %in% c("NL", "PE", "NS", "NB")]<-"Atlantic"
CBSs$region[CBSs$province %in% c("ON")]<-"Ontario"
CBSs$region[CBSs$province %in% c("AB")]<-"Alberta"
CBSs$region[CBSs$province %in% c("MB", "SK")]<-"SK & MB"
CBSs$region[CBSs$province %in% c("BC")]<-"BC"

# In this way, QC, NU/NT, and YT will be coded as 'NA'
table(CBSs$province, CBSs$region, useNA = 'ifany')

# Creat sampling months
CBSs$samplemonth<-as.yearmon(CBSs$sampledate)
table(CBSs$samplemonth, useNA = 'ifany')

# Creat a ever inf indicator
CBSs$ever_inf <- 1-CBSs$never_inf

# Copy new vars to CBSs2
CBSs2$region<-CBSs$region
CBSs2$samplemonth<-CBSs$samplemonth
CBSs2$ever_inf <- 1-CBSs2$never_inf
```

#### Save the dataset

```{r}
save(CBSs, file='../1_data/private/CBSs.RData')
```

#### Creating melt data

```{r}
# create by-month est for each region
tb_bc<-CBSs[CBSs$region=="BC",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_bc$region<-rep("BC", length(tb_bc$n))

tb_at<-CBSs[CBSs$region=="Atlantic",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_at$region<-rep("Atlantic", length(tb_at$n))

tb_on<-CBSs[CBSs$region=="Ontario",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_on$region<-rep("Ontario", length(tb_on$n))

tb_ab<-CBSs[CBSs$region=="Alberta",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_ab$region<-rep("Alberta", length(tb_ab$n))

tb_skm<-CBSs[CBSs$region=="SK & MB",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_skm$region<-rep("SK & MB", length(tb_skm$n))


tb_all<-rbind.data.frame(tb_bc, tb_ab, tb_skm, tb_on, tb_at)
# clean NA's
tb_all<-tb_all[!is.na(tb_all$samplemonth),]
```

```{r}
# create by-month est for each region, using CBSs2 data (model w age & sex)
tb_bc<-CBSs2[CBSs2$region=="BC",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_bc$region<-rep("BC", length(tb_bc$n))

tb_at<-CBSs2[CBSs2$region=="Atlantic",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_at$region<-rep("Atlantic", length(tb_at$n))

tb_on<-CBSs2[CBSs2$region=="Ontario",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_on$region<-rep("Ontario", length(tb_on$n))

tb_ab<-CBSs2[CBSs2$region=="Alberta",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_ab$region<-rep("Alberta", length(tb_ab$n))

tb_skm<-CBSs2[CBSs2$region=="SK & MB",] %>%
  group_by(samplemonth) %>%
  summarise(n = n() , ever_inf= mean(ever_inf, na.rm = T), 
            less_3_month=mean(less_3_month, na.rm = T))
tb_skm$region<-rep("SK & MB", length(tb_skm$n))


tb_all2<-rbind.data.frame(tb_bc, tb_ab, tb_skm, tb_on, tb_at)
# clean NA's
tb_all2<-tb_all2[!is.na(tb_all2$samplemonth),]
```


#### Make plots by region

```{r}
# Reshape meltted data
tb_melt<-reshape2::melt(select(tb_all, 1,3:5), 
                        id.vars = c("samplemonth", "region"),
                        variable.name = "inf",
                        value.name = "prop")

tb_melt2<-reshape2::melt(select(tb_all2, 1,3:5), 
                        id.vars = c("samplemonth", "region"),
                        variable.name = "inf",
                        value.name = "prop")

# 1. The figure using simple model
p01<-tb_melt %>%
  ggplot(aes(x=samplemonth, y=prop, group=inf, colour=inf)) +
  geom_point(aes(colour=inf)) +
  geom_line(aes(colour=inf))  +
  theme_bw() 

p01 + facet_wrap(~region)

# 2. The model using simple model + age & sex
p02<-tb_melt2 %>%
  ggplot(aes(x=samplemonth, y=prop, group=inf, colour=inf)) +
  geom_point(aes(colour=inf)) +
  geom_line(aes(colour=inf))  +
  theme_bw() 

p02 + facet_wrap(~region)
```

## Part IV Apply model to APL data

```{r}
summary(RFD4682_e$N)
# The codebook does not specify what types of anti-N assay is applied, given the number we assume they are using Abbott anti-N assay (small numbers)
```

## Part V Apply model to CANPATH data

```{r}
Canpath <- read.csv("~/COVID-assay-adjust-methods/1_data/private/CANPATH/DAO-543759_ResearcherDataset_Serology_Results_74503par.csv")
Canpath_all <- read.csv("~/COVID-assay-adjust-methods/1_data/private/CANPATH/DAO-543759_ResearcherDataset_Qx_96014par_1125var.csv")

table(Canpath$C1_CITF_ASSAY_ID)


```
